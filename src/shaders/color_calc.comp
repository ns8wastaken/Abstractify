#version 430

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(rgba8, binding = 0) readonly uniform image2D inputImage;

layout(std430, binding = 1) buffer OutputSum {
    uint rgbaSum[5]; // { r, g, b, a, pixelCount }
};

layout(std430, binding = 2) buffer ShapeData {
    int shapeData[8];
};

uniform int shapeType;
uniform ivec2 resolution; // Image resolution

void main() {
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

    if (coords.x >= resolution.x || coords.y >= resolution.y) return;

    switch (shapeType) {
        case 1:  { // Circle
            vec2 pixelPos = vec2(coords) + 0.5;
            float dist = distance(pixelPos, vec2(shapeData[0], shapeData[1])) - float(shapeData[2]);

            if (dist <= 0.0) {
                vec4 color = imageLoad(inputImage, coords);

                atomicAdd(rgbaSum[0], uint(color.r * 255.0));
                atomicAdd(rgbaSum[1], uint(color.g * 255.0));
                atomicAdd(rgbaSum[2], uint(color.b * 255.0));
                atomicAdd(rgbaSum[3], uint(color.a * 255.0));

                atomicAdd(rgbaSum[4], 1u);
            }
        } break;

        case 2:  { // Ellipse
        } break;

        case 4:  { // Square
        } break;

        case 8:  { // Rectangle
        } break;

        case 16: { // Triangle
        } break;

        case 32: { // Line
        } break;

        case 64: { // Curve
        } break;
    }
}
